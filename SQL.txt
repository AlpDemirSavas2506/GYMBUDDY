-- public.facilities definition

-- Drop table

-- DROP TABLE public.facilities;

CREATE TABLE public.facilities (
	id serial4 NOT NULL,
	"name" varchar(100) NOT NULL,
	CONSTRAINT facilities_name_key UNIQUE (name),
	CONSTRAINT facilities_pkey PRIMARY KEY (id)
);


-- public.reservations definition

-- Drop table

-- DROP TABLE public.reservations;

CREATE TABLE public.reservations (
	id serial4 NOT NULL,
	user_id int4 NOT NULL,
	facility_id int4 NOT NULL,
	start_time timestamp NOT NULL,
	end_time timestamp NOT NULL,
	CONSTRAINT reservations_pkey PRIMARY KEY (id),
	CONSTRAINT reservations_facility_id_fkey FOREIGN KEY (facility_id) REFERENCES public.facilities(id) ON DELETE CASCADE,
	CONSTRAINT reservations_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE
);

-- Table Triggers

create trigger check_overlap before
insert
    or
update
    on
    public.reservations for each row execute function prevent_overlap();



-- public.users definition

-- Drop table

-- DROP TABLE public.users;

CREATE TABLE public.users (
	id int4 NOT NULL DEFAULT nextval('users_user_id_seq'::regclass),
	username varchar(50) NOT NULL,
	"name" varchar(50) NOT NULL,
	surname varchar(50) NOT NULL,
	password_hash varchar(255) NOT NULL,
	email varchar(100) NOT NULL,
	height numeric(5, 2) NULL,
	weight numeric(5, 2) NULL,
	blood_type varchar(7) NULL,
	emergency_contact_name varchar(50) NULL,
	emergency_contact_number varchar(15) NULL,
	phone_number varchar(15) NULL,
	profile_picture bytea NULL,
	CONSTRAINT users_email_key UNIQUE (email),
	CONSTRAINT users_pkey PRIMARY KEY (id),
	CONSTRAINT users_username_key UNIQUE (username)
);



-- Create the forum_topics table
CREATE TABLE forum_topics (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    explanation TEXT NOT NULL,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the forum_replies table
CREATE TABLE forum_replies (
    id SERIAL PRIMARY KEY,
    content TEXT NOT NULL,
    topic_id INTEGER NOT NULL REFERENCES forum_topics(id) ON DELETE CASCADE,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the events table
CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    event_date DATE NOT NULL,
    image BYTEA  -- Binary field for storingÂ images
);
